{
  "_args": [
    [
      {
        "raw": "react-native-device-info",
        "scope": null,
        "escapedName": "react-native-device-info",
        "name": "react-native-device-info",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/wqf/Desktop/third/blinder-rnapp"
    ]
  ],
  "_cnpm_publish_time": 1540299293546,
  "_from": "react-native-device-info",
  "_hasShrinkwrap": false,
  "_id": "react-native-device-info@0.24.3",
  "_location": "/react-native-device-info",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-device-info_0.24.3_1540299293412_0.12969129614078145"
  },
  "_npmUser": {
    "name": "machour",
    "email": "machour@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-device-info",
    "scope": null,
    "escapedName": "react-native-device-info",
    "name": "react-native-device-info",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "http://registry.npm.taobao.org/react-native-device-info/download/react-native-device-info-0.24.3.tgz",
  "_shasum": "f15eff8d09fe418eaf5e7c89ddaabbc5ed718fd7",
  "_shrinkwrap": null,
  "_spec": "react-native-device-info",
  "_where": "/Users/wqf/Desktop/third/blinder-rnapp",
  "author": {
    "name": "Rebecca Hughes",
    "email": "rebecca@learnium.net",
    "url": "https://github.com/rebeccahughes"
  },
  "bugs": {
    "url": "https://github.com/rebeccahughes/react-native-device-info/issues"
  },
  "contributors": [
    {
      "name": "Gant Laborde",
      "email": "gant@infinite.red",
      "url": "https://github.com/gantman"
    },
    {
      "name": "Mehdi Achour",
      "email": "machour@gmail.com",
      "url": "https://github.com/machour"
    }
  ],
  "dependencies": {},
  "description": "Get device information using react-native",
  "devDependencies": {
    "np": "^2.16.0",
    "prettier": "^1.10.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f15eff8d09fe418eaf5e7c89ddaabbc5ed718fd7",
    "size": 47982,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/react-native-device-info/download/react-native-device-info-0.24.3.tgz"
  },
  "gitHead": "bf54cd04f8a8df1090e2ad17c3e03eef76118cac",
  "homepage": "https://github.com/rebeccahughes/react-native-device-info#readme",
  "keywords": [
    "react-component",
    "react-native",
    "ios",
    "android",
    "windows",
    "device",
    "events",
    "cocoapod"
  ],
  "license": "MIT",
  "main": "deviceinfo.js",
  "maintainers": [
    {
      "name": "gantman",
      "email": "gantman+npm@gmail.com"
    },
    {
      "name": "jeroenbourgois",
      "email": "info@jeroenbourgois.be"
    },
    {
      "name": "lilach",
      "email": "i.am.red@gmail.com"
    },
    {
      "name": "machour",
      "email": "machour@gmail.com"
    },
    {
      "name": "rebeccahughes",
      "email": "rebecca@learnium.net"
    }
  ],
  "name": "react-native-device-info",
  "optionalDependencies": {},
  "publish_time": 1540299293546,
  "readme": "# react-native-device-info\n\n[![npm version](https://badge.fury.io/js/react-native-device-info.svg)](http://badge.fury.io/js/react-native-device-info)\n\nDevice Information for [React Native](https://github.com/facebook/react-native).\n\n## TOC\n\n* [Installation](#installation)\n* [Linking](#linking)\n* [Usage](#usage)\n* [API](#api)\n* [Troubleshooting](#troubleshooting)\n* [Release Notes](#release-notes)\n* [react-native-web](#react-native-web)\n\n## Installation\n\nUsing npm:\n\n```shell\nnpm install --save react-native-device-info\n```\n\nor using yarn:\n\n```shell\nyarn add react-native-device-info\n```\n\n> ⚠️ If you are on React Native > 0.47, you must use version 0.11.0 of this library or higher\n\n## Linking\n\n### Automatic\n\n```shell\nreact-native link react-native-device-info\n```\n\n(or using [`rnpm`](https://github.com/rnpm/rnpm) for versions of React Native < 0.27)\n\n```shell\nrnpm link react-native-device-info\n```\n\n### Manual\n\n<details>\n    <summary>iOS (via Cocoa Pods)</summary>\n\nAdd the following line to your build targets in your `Podfile`\n\n`pod 'RNDeviceInfo', :path => '../node_modules/react-native-device-info'`\n\nThen run `pod install`\n\n</details>\n\n<details>\n    <summary>iOS (without Cocoa Pods)</summary>\n\nIn XCode, in the project navigator:\n\n* Right click _Libraries_\n* Add Files to _[your project's name]_\n* Go to `node_modules/react-native-device-info`\n* Add the `.xcodeproj` file\n\nIn XCode, in the project navigator, select your project.\n\n* Add the `libRNDeviceInfo.a` from the _deviceinfo_ project to your project's _Build Phases ➜ Link Binary With Libraries_\n* Click `.xcodeproj` file you added before in the project navigator and go the _Build Settings_ tab. Make sure _All_ is toggled on (instead of _Basic_).\n* Look for _Header Search Paths_ and make sure it contains both `$(SRCROOT)/../react-native/React` and `$(SRCROOT)/../../React`\n* Mark both as recursive (should be OK by default).\n\nRun your project (Cmd+R)\n\n(Thanks to @brysgo for writing the instructions)\n\n</details>\n\n<details>\n    <summary>Android</summary>\n\n* **_optional_** in `android/build.gradle`:\n\n```gradle\n...\n  ext {\n    // dependency versions\n    googlePlayServicesVersion = \"<Your play services version>\" // default: \"+\"\n    compileSdkVersion = \"<Your compile SDK version>\" // default: 23\n    buildToolsVersion = \"<Your build tools version>\" // default: \"25.0.2\"\n    targetSdkVersion = \"<Your target SDK version>\" // default: 22\n  }\n...\n```\n\n* in `android/app/build.gradle`:\n\n```diff\ndependencies {\n    ...\n    compile \"com.facebook.react:react-native:+\"  // From node_modules\n+   compile project(':react-native-device-info')\n}\n```\n\n* in `android/settings.gradle`:\n\n```diff\n...\ninclude ':app'\n+ include ':react-native-device-info'\n+ project(':react-native-device-info').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-device-info/android')\n```\n\n#### With React Native 0.29+\n\n* in `MainApplication.java`:\n\n```diff\n+ import com.learnium.RNDeviceInfo.RNDeviceInfo;\n\n  public class MainApplication extends Application implements ReactApplication {\n    //......\n\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n+         new RNDeviceInfo(),\n          new MainReactPackage()\n      );\n    }\n\n    ......\n  }\n```\n\n#### With older versions of React Native:\n\n* in `MainActivity.java`:\n\n```diff\n+ import com.learnium.RNDeviceInfo.RNDeviceInfo;\n\n  public class MainActivity extends ReactActivity {\n    ......\n\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n+       new RNDeviceInfo(),\n        new MainReactPackage()\n      );\n    }\n  }\n```\n\n(Thanks to @chirag04 for writing the instructions)\n\n</details>\n\n<details>\n    <summary>Windows</summary>\n\n* Open the solution in Visual Studio for your Windows apps\n* right click your in the Explorer and click Add > Existing Project...\n* Navigate to `./<app-name>/node_modules/react-native-device-info/windows/RNDeviceInfo` and add `RNDeviceInfo.csproj`\n* this time right click on your React Native Windows app under your solutions directory and click Add > Reference...\n* check the `RNDeviceInfo` you just added and press ok\n* open up `MainReactNativeHost.cs` for your app and edit the file like so:\n\n```diff\n+ using RNDeviceInfo;\n......\n        protected override List<IReactPackage> Packages => new List<IReactPackage>\n        {\n            new MainReactPackage(),\n+           new RNDeviceInfoPackage(),\n        };\n```\n\n(Thanks to @josephan for writing the instructions)\n\n</details>\n\n## Usage\n\n```js\nimport DeviceInfo from 'react-native-device-info';\n```\n\n## API\n\n| Method                                            | Return Type         |  iOS | Android | Windows | Since  |\n| ------------------------------------------------- | ------------------- | :--: | :-----: | :-----: | ------ |\n| [getAPILevel()](#getapilevel)                     | `number`            |  ❌  |   ✅    |   ❌    | 0.12.0 |\n| [getApplicationName()](#getapplicationname)       | `string`            |  ✅  |   ✅    |   ✅    | 0.14.0 |\n| [getBatteryLevel()](#getbatterylevel)             | `Promise<number>`   |  ✅  |   ✅    |   ✅    | 0.18.0 |\n| [getBrand()](#getbrand)                           | `string`            |  ✅  |   ✅    |   ✅    | 0.9.3  |\n| [getBuildNumber()](#getbuildnumber)               | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getBundleId()](#getbundleid)                     | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getCarrier()](#getcarrier)                       | `string`            |  ✅  |   ✅    |   ❌    | 0.13.0 |\n| [getDeviceCountry()](#getdevicecountry)           | `string`            |  ✅  |   ✅    |   ✅    | 0.9.0  |\n| [getDeviceId()](#getdeviceid)                     | `string`            |  ✅  |   ✅    |   ✅    | 0.5.0  |\n| [getDeviceLocale()](#getdevicelocale)             | `string`            |  ✅  |   ✅    |   ✅    | 0.7.0  |\n| [getDeviceName()](#getdevicename)                 | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getFirstInstallTime()](#getfirstinstalltime)     | `number`            |  ❌  |   ✅    |   ✅    | 0.12.0 |\n| [getFontScale()](#getfontscale)                   | `number`            |  ✅  |   ✅    |   ❌    | 0.15.0 |\n| [getFreeDiskStorage()](#getfreediskstorage)       | `number`            |  ✅  |   ✅    |   ❌    | 0.15.0 |\n| [getIPAddress()](#getipaddress)                   | `Promise<string>`   |  ✅  |   ✅    |   ✅    | 0.12.0 |\n| [getInstallReferrer()](#getinstallreferrer)       | `string`            |  ❌  |   ✅    |   ❌    | 0.19.0 |\n| [getInstanceID()](#getinstanceid)                 | `string`            |  ❌  |   ✅    |   ❌    | ?      |\n| [getLastUpdateTime()](#getlastupdatetime)         | `number`            |  ❌  |   ✅    |   ❌    | 0.12.0 |\n| [getMACAddress()](#getmacaddress)                 | `Promise<string>`   |  ✅  |   ✅    |   ❌    | 0.12.0 |\n| [getManufacturer()](#getmanufacturer)             | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getMaxMemory()](#getmaxmemory)                   | `number`            |  ❌  |   ✅    |   ✅    | 0.14.0 |\n| [getModel()](#getmodel)                           | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getPhoneNumber()](#getphonenumber)               | `string`            |  ❌  |   ✅    |   ❌    | 0.12.0 |\n| [getReadableVersion()](#getreadableversion)       | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getSerialNumber()](#getserialnumber)             | `string`            |  ❌  |   ✅    |   ❌    | 0.12.0 |\n| [getSystemName()](#getsystemname)                 | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getSystemVersion()](#getsystemversion)           | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getTimezone()](#gettimezone)                     | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getTotalDiskCapacity()](#gettotaldiskcapacity)   | `number`            |  ✅  |   ✅    |   ❌    | 0.15.0 |\n| [getTotalMemory()](#gettotalmemory)               | `number`            |  ✅  |   ✅    |   ❌    | 0.14.0 |\n| [getUniqueID()](#getuniqueid)                     | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [getUserAgent()](#getuseragent)                   | `string`            |  ✅  |   ✅    |   ❌    | 0.7.0  |\n| [getVersion()](#getversion)                       | `string`            |  ✅  |   ✅    |   ✅    | ?      |\n| [is24Hour()](#is24hour)                           | `boolean`           |  ✅  |   ✅    |   ✅    | 0.13.0 |\n| [isEmulator()](#isemulator)                       | `boolean`           |  ✅  |   ✅    |   ✅    | ?      |\n| [isPinOrFingerprintSet()](#ispinorfingerprintset) | (callback)`boolean` |  ✅  |   ✅    |   ✅    | 0.10.1 |\n| [isTablet()](#istablet)                           | `boolean`           |  ✅  |   ✅    |   ✅    | ?      |\n| [hasNotch()](#hasNotch)                           | `boolean`           |  ✅  |   ✅    |   ✅    | 0.23.0 |\n| [isLandscape()](#isLandscape)                     | `boolean`           |  ✅  |   ✅    |   ✅    | 0.24.0 |\n\n---\n\n### getAPILevel()\n\nGets the API level.\n\n**Examples**\n\n```js\nconst apiLevel = DeviceInfo.getAPILevel();\n\n// iOS: ?\n// Android: 25\n// Windows: ?\n```\n\n**Notes**\n\n> See [API Levels](https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels)\n\n---\n\n### getApplicationName()\n\nGets the application name.\n\n**Examples**\n\n```js\nconst appName = DeviceInfo.getApplicationName(); // \"Learnium Mobile\"\n```\n\n---\n\n### getBatteryLevel()\n\nGets the battery level of the device as a float comprised between 0 and 1.\n\n**Examples**\n\n```js\nDeviceInfo.getBatteryLevel().then(batteryLevel => {\n  // 0.759999\n});\n```\n\n**Notes**\n\n> Returns -1 on the iOS Simulator\n\n---\n\n### getBrand()\n\nGets the device brand.\n\n**Examples**\n\n```js\nconst brand = DeviceInfo.getBrand();\n\n// iOS: \"Apple\"\n// Android: \"Xiaomi\"\n// Windows: ?\n```\n\n---\n\n### getBuildNumber()\n\nGets the application build number.\n\n**Examples**\n\n```js\nconst buildNumber = DeviceInfo.getBuildNumber();\n\n// iOS: \"89\"\n// Android: 4\n// Windows: ?\n```\n\n**Notes**\n\n> There is a type inconsistency: Android return an integer instead of the documented string.\n\n---\n\n### getBundleId()\n\nGets the application bundle identifier.\n\n**Examples**\n\n```js\nconst bundleId = DeviceInfo.getBundleId(); // \"com.learnium.mobile\"\n```\n\n---\n\n### getCarrier()\n\nGets the carrier name (network operator).\n\n**Examples**\n\n```js\nconst carrier = DeviceInfo.getCarrier(); // \"SOFTBANK\"\n```\n\n---\n\n### getDeviceCountry()\n\nGets the device country based on the locale information.\n\n**Examples**\n\n```js\nconst deviceCountry = DeviceInfo.getDeviceCountry(); // \"US\"\n```\n\n---\n\n### getDeviceId()\n\nGets the device ID.\n\n**Examples**\n\n```js\nconst deviceId = DeviceInfo.getDeviceId();\n\n// iOS: \"iPhone7,2\"\n// Android: \"goldfish\"\n// Windows: ?\n```\n\n---\n\n### getDeviceLocale()\n\nGets the device locale.\n\n**Examples**\n\n```js\nconst deviceLocale = DeviceInfo.getDeviceLocale();\n\n// iOS: \"en\"\n// Android: \"en-US\"\n// Windows: ?\n```\n\n---\n\n### getDeviceName()\n\nGets the device name.\n\n**Examples**\n\n```js\nconst deviceName = DeviceInfo.getDeviceName();\n\n// iOS: \"Becca's iPhone 6\"\n// Android: ?\n// Windows: ?\n```\n\n**Android Permissions**\n\n* [android.permission.BLUETOOTH](https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH)\n\n---\n\n### getFirstInstallTime()\n\nGets the time at which the app was first installed, in milliseconds.\n\n**Examples**\n\n```js\nconst firstInstallTime = DeviceInfo.getFirstInstallTime();\n\n// Android: 1517681764528\n```\n\n---\n\n### getFontScale()\n\nGets the device font scale.\nThe font scale is the ratio of the current system font to the \"normal\" font size, so if normal text is 10pt and the system font is currently 15pt, the font scale would be 1.5\nThis can be used to determine if accessability settings has been changed for the device; you may want to re-layout certain views if the font scale is significantly larger ( > 2.0 )\n\n**Examples**\n\n```js\nconst fontScale = DeviceInfo.getFontScale(); // 1.2\n```\n\n---\n\n### getFreeDiskStorage()\n\nGets available storage size, in bytes.\n\n**Examples**\n\n```js\nconst freeDiskStorage = DeviceInfo.getFreeDiskStorage();\n\n// Android: 17179869184\n// iOS: 17179869184\n```\n\n**Notes**\n\n> From [developer.android.com](<https://developer.android.com/reference/android/os/Environment.html#getExternalStorageDirectory()>):\n>\n> Return the primary shared/external storage directory.\n>\n> Note: don't be confused by the word \"external\" here. This directory can better be thought as\n> media/shared storage. It is a filesystem that can hold a relatively large amount of data and\n> that is shared across all applications (does not enforce permissions). Traditionally this is\n> an SD card, but it may also be implemented as built-in storage in a device that is distinct\n> from the protected internal storage and can be mounted as a filesystem on a computer.\n\n---\n\n### getIPAddress()\n\nGets the device current IP address.\n\n**Examples**\n\n```js\nDeviceInfo.getIPAddress().then(ip => {\n  // \"92.168.32.44\"\n});\n```\n\n**Android Permissions**\n\n* [android.permission.ACCESS_WIFI_STATE](https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_WIFI_STATE)\n\n**Notes**\n\n> Support for iOS was added in 0.22.0\n\n---\n\n### getInstallReferrer()\n\nGets the referrer string upon application installation.\n\n**Examples**\n\n```js\nconst referrer = DeviceInfo.getInstallReferrer();\n\n// If the app was installed from https://play.google.com/store/apps/details?id=com.myapp&referrer=my_install_referrer\n// the result will be \"my_install_referrer\"\n```\n\n---\n\n### getInstanceID()\n\nGets the application instance ID.\n\n**Examples**\n\n```js\nconst instanceId = DeviceInfo.getInstanceID();\n\n// Android: ?\n```\n\n**Notes**\n\n> See https://developers.google.com/instance-id/\n\n---\n\n### getLastUpdateTime()\n\nGets the time at which the app was last updated, in milliseconds.\n\n**Examples**\n\n```js\nconst lastUpdateTime = DeviceInfo.getLastUpdateTime();\n\n// Android: 1517681764992\n```\n\n---\n\n### getMACAddress()\n\nGets the network adapter MAC address.\n\n**Examples**\n\n```js\nDeviceInfo.getMACAddress().then(mac => {\n  // \"E5:12:D8:E5:69:97\"\n});\n```\n\n**Android Permissions**\n\n* [android.permission.ACCESS_WIFI_STATE](https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_WIFI_STATE)\n\n**Notes**\n\n> iOS: This method always return \"02:00:00:00:00:00\" as retrieving the MAC address is [disabled since iOS 7](https://developer.apple.com/library/archive/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW34)\n\n---\n\n### getManufacturer()\n\nGets the device manufacturer.\n\n**Examples**\n\n```js\nconst manufacturer = DeviceInfo.getManufacturer();\n\n// iOS: \"Apple\"\n// Android: \"Google\"\n// Windows: ?\n```\n\n---\n\n### getMaxMemory()\n\nReturns the maximum amount of memory that the VM will attempt to use, in bytes.\n\n**Examples**\n\n```js\nconst maxMemory = DeviceInfo.getMaxMemory(); // 402653183\n```\n\n---\n\n### getModel()\n\nGets the device model.\n\n**Examples**\n\n```js\nconst model = DeviceInfo.getModel();\n\n// iOS: ?\n// Android: ?\n// Windows: ?\n```\n\n---\n\n### getPhoneNumber()\n\nGets the device phone number.\n\n**Examples**\n\n```js\nconst phoneNumber = DeviceInfo.getPhoneNumber();\n\n// Android: ?\n```\n\n**Android Permissions**\n\n* [android.permission.READ_PHONE_STATE](https://developer.android.com/reference/android/Manifest.permission.html#READ_PHONE_STATE)\n\n**Notes**\n\n> This can return `undefined` in certain cases and should not be relied on. [SO entry on the subject](https://stackoverflow.com/questions/2480288/programmatically-obtain-the-phone-number-of-the-android-phone#answer-2480307).\n\n---\n\n### getReadableVersion()\n\nGets the application human readable version.\n\n**Examples**\n\n```js\nconst readableVersion = DeviceInfo.getReadableVersion();\n\n// iOS: 1.0.1\n// Android: 1.0.1\n// Windows: ?\n```\n\n---\n\n### getSerialNumber()\n\nGets the device serial number.\n\n**Examples**\n\n```js\nconst serialNumber = DeviceInfo.getSerialNumber();\n\n// iOS: undefined\n// Android: ?\n// Windows: ?\n```\n\n---\n\n### getSystemName()\n\nGets the device OS name.\n\n**Examples**\n\n```js\nconst systemName = DeviceInfo.getSystemName();\n\n// iOS: \"iOS\" on newer iOS devices \"iPhone OS\" on older devices, including older iPad's.\n// Android: \"Android\"\n// Windows: ?\n```\n\n---\n\n### getSystemVersion()\n\nGets the device OS version.\n\n**Examples**\n\n```js\nconst systemVersion = DeviceInfo.getSystemVersion();\n\n// iOS: \"11.0\"\n// Android: \"7.1.1\"\n// Windows: ?\n```\n\n---\n\n### getTimezone()\n\nGets the device default timezone.\n\n**Examples**\n\n```js\nconst timezone = DeviceInfo.getTimezone(); // \"Africa/Tunis\"\n```\n\n---\n\n### getTotalDiskCapacity()\n\nGets full disk storage size, in bytes.\n\n**Examples**\n\n```js\nconst storageSize = DeviceInfo.getTotalDiskCapacity();\n\n// Android: 17179869184\n// iOS: 17179869184\n```\n\n---\n\n### getTotalMemory()\n\nGets the device total memory, in bytes.\n\n**Examples**\n\n```js\nconst totalMemory = DeviceInfo.getTotalMemory(); // 1995018240\n```\n\n---\n\n### getUniqueID()\n\nGets the device unique ID.\n\n**Examples**\n\n```js\nconst uniqueId = DeviceInfo.getUniqueID();\n\n// iOS: \"FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9\"\n// Android: \"dd96dec43fb81c97\"\n// Windows: ?\n```\n\n**Notes**\n\n> * iOS: This is [`IDFV`](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor) so it will change if all apps from the current apps vendor have been previously uninstalled.\n> * android: Prior to Oreo, this id ([ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID)) will always be the same once you set up your phone.\n\n---\n\n### getUserAgent()\n\nGets the device User Agent.\n\n**Examples**\n\n```js\nconst userAgent = DeviceInfo.getUserAgent();\n\n// iOS: \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143\"\n// Android: ?\n// Windows: ?\n```\n\n---\n\n### getVersion()\n\nGets the application version.\n\n**Examples**\n\n```js\nconst version = DeviceInfo.getVersion();\n\n// iOS: \"1.0\"\n// Android: \"1.0\n// Windows: ?\n```\n\n---\n\n### is24Hour()\n\nTells if the user preference is set to 24-hour format.\n\n**Examples**\n\n```js\nconst is24Hour = DeviceInfo.is24Hour(); // true\n```\n\n---\n\n### isEmulator()\n\nTells if the application is running in an emulator.\n\n**Examples**\n\n```js\nconst isEmulator = DeviceInfo.isEmulator(); // false\n```\n\n---\n\n### isPinOrFingerprintSet()\n\nTells if a PIN number or a fingerprint was set for the device.\n\n**Examples**\n\n```js\nDeviceInfo.isPinOrFingerprintSet()(isPinOrFingerprintSet => {\n  if (!isPinOrFingerprintSet) {\n    // ...\n  }\n});\n```\n\n**Notes**\n\n> * Since the device setting for PIN/Fingerprint can be modified while the app is still open, this is available via callback instead of as a constant.\n> * iOS: Not supported for iOS < 9\n\n---\n\n### isTablet()\n\nTells if the device is a tablet.\n\n**Examples**\n\n```js\nconst isTablet = DeviceInfo.isTablet(); // true\n```\n\n---\n\n### isLandscape()\n\nTells if the device is currently in landscape mode.\n\n**Examples**\n\n```js\nconst isLandscape = DeviceInfo.isLandscape(); // true\n```\n\n### hasNotch()\n\nTells if the device has a notch.\n\n**Examples**\n\n```js\nconst hasNotch = DeviceInfo.hasNotch(); // true\n```\n\n## Troubleshooting\n\nWhen installing or using `react-native-device-info`, you may encounter the following problems:\n\n<details>\n  <summary>[android] - Unable to merge dex / Multiple dex files / Problems with `com.google.android.gms`</summary>\n\n`react-native-device-info` uses `com.google.android.gms:play-services-gcm` to provide [getInstance()][#getinstance].\nThis can lead to conflicts when building the Android application.\n\nIf you're using a different version of `com.google.android.gms:play-services-gcm` in your app, you can define the\n`googlePlayServicesVersion` gradle variable in your `build.gradle` file to tell `react-native-device-info` what version\nit should require.\n\nIf you're using a different library that conflicts with `com.google.android.gms:play-services-gcm`, you can simply\nignore this dependency in your gradle file:\n\n```\n compile(project(':react-native-device-info')) {\n    exclude group: 'com.google.android.gms'\n}\n```\n\n</details>\n\n<details>\n  <summary>[ios] - ld: library not found for -lRNDeviceInfo-tvOS</summary>\n\nSeems to be a bug caused by `react-native link`. You can manually delete `libRNDeviceInfo-tvOS.a` in `Xcode -> [Your iOS build target] -> Build Phrases -> Link Binary with Libraries`.\n\n</details>\n\n<details>\n  <summary>[tests] - Cannot run my test suite when using this library</summary>\n\n`react-native-device-info` contains native code, and needs to be mocked.\n\nHere's how to do it with jest for example:\n\n```\n// in your package.json:\n\"jest\": {\n  \"setupFiles\": [\n    \"./testenv.js\"\n  ],\n\n\n// testenv.js:\njest.mock('react-native-device-info', () => {\n  return {\n    getModel: jest.fn(),\n  };\n});\n```\n\n</details>\n\n## Release Notes\n\nSee the [CHANGELOG.md](https://github.com/rebeccahughes/react-native-device-info/blob/master/CHANGELOG.md).\n\n## react-native-web\n\nAs a courtesy to developers, this library was made compatible in v0.17.0 with [react-native-web](https://github.com/necolas/react-native-web) by providing an empty polyfill in order to avoid breaking builds.\n\nOnly [getUserAgent()](#getuseragent) will return a correct value. All other API methods will return an \"empty\" value of its documented return type: `0` for numbers, `''` for strings, `false` for booleans.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rebeccahughes/react-native-device-info.git"
  },
  "scripts": {
    "shipit": "np"
  },
  "typings": "./deviceinfo.d.ts",
  "version": "0.24.3"
}
