var AssetsService = require('./lib/AssetsService');
var DealService = require('./lib/DealService');
var UserService = require('./lib/UserService');
var AccountService = require('./lib/AccountService');
var ProtocalService = require('./lib/ProtocalService');
var ProductService = require('./lib/ProductService');
var UtilService = require('./lib/UtilService');
var BizParamsFilter = require('./lib/BizParamsFilter');
var AuthParamFilter = require('./lib/AuthParamFilter');
var DiscoveryService = require('./lib/DiscoveryService');
var InsureService = require('./lib/InsureService');
var HelpService = require('./lib/HelpService');
var MutualFundService = require('./lib/MutualFund')
var MoutaiService = require('./lib/MontaiService');
var logger = require('./lib/logger');

/**
 * @param {Object} httpClient
 *
 * httpClient对象需要实现如下方法
 *  * setUrlPrefix(url)
 *  * setParamFilter(filter)
 *  * get(url)
 *  * getJson(url)
 *  * post(url, params)
 *  * postJson(url, params)
 *
 * 其中filter需要实现filterParams(params, url)方法
 * @see ParamFilter
 * @constructor
 */
var HttpService =  function(httpClient) {
  this.client = httpClient;
  /** @private */
  this._assetsService = new AssetsService(httpClient);
  /** @private */
  this._dealService = new DealService(httpClient);
  /** @private */
  this._userService = new UserService(httpClient);
  /** @private */
  this._productService = new ProductService(httpClient);
  /** @private */
  this._accountService = new AccountService(httpClient);
  /** @private */
  this._protocalService = new ProtocalService(httpClient);
  /** @private */
  this._discoveryService = new DiscoveryService(httpClient);
  /** @private */
  this._insureService = new InsureService(httpClient);
  /** @private */
  this._utilService = new UtilService(httpClient);
  /** @private */
  this._helpService = new HelpService(httpClient);
  /** @private */
  this._mutualFundService = new MutualFundService(httpClient);
  /** @private */
  this._moutaiService = new MoutaiService(httpClient);
};

/**
 * 单例模式：获取HttpService默认容器
 * @param httpClientClass {function}  httpClient类对象
 * @param urlPrefix       {String}    url前缀
 * @param userInfo        {Object}    用户信息
 * @param appkey        {String}    校验参数key
 * @param appSecret        {String}    教研参数加密参数
 * @returns {HttpService}
 */
HttpService.$getDefaultService = function(httpClientClass, urlPrefix, userInfo, appkey, appSecret) {
  if (!HttpService.defaultService) {
    HttpService.defaultService = HttpService.$initService(httpClientClass, urlPrefix, userInfo, appkey, appSecret);
  }
  return HttpService.defaultService;
};

/**
 * 初始化并返回一个HttpService
 * @param httpClientClass {function}    httpClient类对象
 * @param urlPrefix       {String}      url前缀
 * @param userInfo        {Object}      用户信息
 * @param appkey        {String}    校验参数key
 * @param appSecret        {String}    教研参数加密参数
 * @returns               {HttpService} 创建好的HttpService对象
 */
HttpService.$initService = function(httpClientClass, urlPrefix, userInfo, appkey, appSecret) {
  // 业务通用参数
  var bizFilter = new BizParamsFilter(userInfo);
  // 校验参数，要放到最后
  var authFilter = new AuthParamFilter(appkey, appSecret);
  var httpClient = new httpClientClass(urlPrefix, [bizFilter, authFilter]);
  httpClient.$setErrHandingRule && httpClient.$setErrHandingRule(setBussinessWarnHanding);
  httpClient.$setLoggerFilterParamter && httpClient.$setLoggerFilterParamter(['password', 'jhPassword']);// 设置httpClient的日志过滤数组
  return new HttpService(httpClient);
};

/**
 * 设置用户信息，用户统一参数处理
 * @param userInfo 用户信息
 */
HttpService.prototype.$setUserInfo = function(userInfo) {
  if (this.client && this.client.$addParamsFilter) {
    var bizObj = new BizParamsFilter(userInfo);
    this.client.$addParamsFilter(bizObj);

    // 设置日志通用参数
    var paramForLogger = bizObj.filterParams(userInfo);
    logger.setGeneralParameter && logger.setGeneralParameter(userInfo);                       // 在http-service中设置当前logger的通用参数
    this.client.$setLoggerGeneralParamter && this.client.$setLoggerGeneralParamter(userInfo); // 在htttp-service中设置http-client的日志通用参数
  }
};

HttpService.prototype.$setAuthInfo = function(appkey, appSecret, dateDiff) {
  if (this.client && this.client.$addParamsFilter) {
    this.client.$addParamsFilter(new AuthParamFilter(appkey, appSecret, dateDiff));
  }
};

HttpService.prototype.$setUrlPrefix = function(urlPrefix) {
  if (this.client && this.client.$setUrlPrefix) {
    this.client.$setUrlPrefix(urlPrefix);
  }
};


/**
 * 设置日志相关
 * @param logger 日志对象
 */
HttpService.prototype.$setLogger = function(loggerObj) {
  logger = loggerObj;
  this.client.$setLogger(loggerObj);
};

/**
 * 开户绑卡相关接口集合
 * @returns {AccountService}
 */
HttpService.prototype.$getAccountService = function() {
  return this._accountService;
};
/**
 * 产品信息相关接口集合
 * @returns {ProductService}
 */
HttpService.prototype.$getProductService = function() {
  return this._productService;
};
/**
 * 用户注册登录等相关接口集合
 * @returns {UserService}
 */
HttpService.prototype.$getUserService = function() {
  return this._userService;
};
/**
 * 用户资产查询相关接口集合
 * @returns {AssetsService}
 */
HttpService.prototype.$getAssetsService = function() {
  return this._assetsService;
};
/**
 * 用户交易等相关接口集合
 * @returns {DealService}
 */
HttpService.prototype.$getDealService = function() {
  return this._dealService;
};

/**
 * 产品协议相关接口集合
 * @returns {ProtocalService}
 */
HttpService.prototype.$getProtocalService = function() {
  return this._protocalService;
};

/**
 * 产品保单相关接口集合
 * @returns {InsureService}
 */
HttpService.prototype.$getInsureService = function() {
  return this._insureService;
};


/**
 * 工具等相关接口集合
 * @returns {UtilService}
 */
HttpService.prototype.$getUtilService = function() {
  return this._utilService;
};

/**
 * 发现模块接口集合
 * @returns {DiscoveryService}
 */
HttpService.prototype.$getDiscoveryService = function() {
  return this._discoveryService;
};

/**
 * 帮助接口集合
 * @returns {HelpService}
 */
HttpService.prototype.$getHelpService = function() {
  return this._helpService;
};

/**
 * 公募基金接口集合
 * @returns {MutualFundService}
 */
HttpService.prototype.$getMutualFundService = function() {
  return this._mutualFundService;
};
/**
 * 茅酒会接口集合
 * @returns {MoutaiService}
 */
HttpService.prototype.$getMontaiService =function() {
  return this._moutaiService;
}
// 注入到http-client中的业务错误错误处理回调
function setBussinessWarnHanding(tag, options, data) {
  var isBusinessErr = false;
  if(typeof data.message != 'undefined' && typeof data.message.code != 'undefined' && data.message.code != '0' ) {
    isBusinessErr = true;
  }
  // 如果是业务逻辑错误，就打印warn日志
  if (isBusinessErr) {
    // 打印warn日志
    logger.warn(tag, {
      method: options.method,
      url: options.uri || '',
      body: options.form || {},
      response: JSON.stringify(data)
    })
  }
}

module.exports = exports = HttpService;