var HttpService = require('../index');
var testIndex = require('./index');
var accountService = HttpService.$getDefaultService().$getAccountService();
var userService = HttpService.$getDefaultService().$getUserService();

function getRandomMobile(min, max){
  return result = Math.floor(min + Math.random() * (max - min));
}
/*describe('测试获取银行卡列表', function(done){
  this.timeout(10000);

  before(function() {
    return userService.$login('11100006789','111111').then(function(result){
      HttpService.$getDefaultService().$setUserInfo(result);
    });
  });

  it('支持的银行卡列表接口正常', function(){
    return accountService.$getSupportBanks().should.eventually.satisfy(function(obj){
      return obj.message.code == 0;
    }).notify(done);
  });

  it('用户已绑定银行卡列表接口正常', function(){
    return accountService.$getUserBindBanks().should.eventually.satisfy(function(obj){
      return obj.message.code == 0;
    }).notify(done);
  });
});*/

/*describe('测试金融联短信验证码', function(done){
  this.timeout(10000);

  var mobile = '18610562327';
  var wrongMobile = '11100006789'
  var idNo = '421182198403136072';//身份证件号
  var bankNo = 'GHZF';//银行代码（工行）
  var bankAccount = '6222021208017891373';//银行卡号（工行）
  var name = '柳杨焦';

  before(function() {
    return userService.$login(mobile,'111111').then(function(result){
      HttpService.$getDefaultService().$setUserInfo(result);
    });
  });

  it('it will return a code(0) when info is correct', function(){
    return accountService.$getAccountVerifyCode(mobile, idNo, bankNo, bankAccount).should.eventually.satisfy(function(obj){
      return obj.message.code == 0;
    }).notify(done);
  });

  it('it will return a code(RC78) when mobile with wrong format', function(){
    return accountService.$getAccountVerifyCode(wrongMobile, idNo, bankNo, bankAccount).should.eventually.satisfy(function(obj){
      return obj.message.code == 'RC78';
    }).notify(done);
  });

});*/



/*describe('测试非华创开户接口', function(done){
  this.timeout(10000);
  //手机号，身份证号 需要自动生成
  var mobile = '12'  + getRandomMobile(100000000, 999999999);
  var user = {
    idNo:'421182'+ getRandomMobile(1900, 2099)+'03136072',
    bankNo:'GHZF',
    bankAccount:'6222021'+ getRandomMobile(1900, 2099)+'7891373'
  };
  //step1 给当前手机号，发送注册验证码
  before(function() {
    return userService.$sendVerifyCode(mobile, 'register').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  //step2 提交注册
  before(function() {
    return userService.$register(mobile, '111111', '7310', '', '', '', '').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0 && obj.mobile == mobile;
    }).notify(done);
  });

  //step3 登陆后设置用户信息过滤器
  before(function() {
    return userService.$login(mobile,'111111').then(function(result){
      HttpService.$getDefaultService().$setUserInfo(result);
    });
  });

  //step3 登陆后设置用户信息过滤器
  before(function() {
    return userService.$login(mobile,'111111').then(function(result){
      HttpService.$getDefaultService().$setUserInfo(result);
    });
  });

  //step4 模拟发送验证码
  before(function() {
    return accountService.$getAccountVerifyCode(mobile, user.idNo, user.bankNo, user.bankAccount).should.eventually.satisfy(function(obj){
      return obj.message.code == 0 || obj.message.code == 'RC78';
    }).notify(done);
  });

  it('should openaccount success(not hc) when info is correct', function(){
    var obj = {
      idNo: user.idNo,
      idKind: 0,
      mobiletelephone: mobile,
      bankNo: user.bankNo,
      bankAccount: user.bankAccount,
      tiedCardType: 0,
      phoneNo: mobile,
      clientName:'工行卡',
      password: '111111',
      useType: 2,
      identifyingCode:'123456'
    };
    return accountService.$openAccount(obj).should.eventually.satisfy(function(obj){
      console.log('###')
      console.log(obj)
      return obj.message.code == 0;
    }).notify(done);
  });
});*/

//TODO 华创证券接口开户绑卡，无法复现，需要跟代销申请账号，不能自己造

//TODO 添加银行卡 删除银行卡接口 11143211240


describe('测试银行卡识别接口', function(done){
  this.timeout(5000);

  it('it will return a code(0) when info is correct', function(){
    return accountService.$getBankInfoByCardId('6214830421487616').should.eventually.satisfy(function(obj){
      return obj.message.code == 0;
    }).notify(done);
  });

});

describe('测试用户风险等级测评接口', function(done){
  this.timeout(5000);

  var mobile = '11143211240';

  before(function () {
    return userService.$login(mobile, '111111').then(function (result) {
      HttpService.$getDefaultService().$setUserInfo(result);
    });
  });

  it('it will return a code(0) when info is correct', function(){
    return accountService.$userRiskGradeEvaluation({ riskVersion: 'v2', answers: 'D,D,D,D,D,C,D,E,D,C,D,D,D' }).should.eventually.satisfy(function(obj){
      return obj.message.code == 0;
    }).notify(done);
  });

});

describe('测试绑卡FAQ', function(done){
  this.timeout(5000);

  it('it will return a code(0) when info is correct', function(){
    return accountService.$getBankFAQInfo('GHZF').should.eventually.satisfy(function(obj){
      return obj.message.code == 0;
    }).notify(done);
  });

});

