/**
 * Created by ztian on 16/7/12.
 */

var HttpService = require('../index');
var testIndex = require('./index');
var userService = HttpService.$getDefaultService().$getUserService();
var md5 = require('blueimp-md5');

function getRandomMobile(min, max) {
  return result = Math.floor(min + Math.random() * (max - min));
}

//获取signcode
function getSignCode(obj) {
  //这三个参数必须
  if (!('appkey' in obj) || !('appsecret' in obj) || !('timestamp' in obj)) {
    return;
  }

  var keysArr = [];
  for (var key in obj) {
    if (key == 'appsecret') continue;
    keysArr.push(key);
  }

  //signcode拼接
  var signcode = obj.appsecret + keysArr.sort().map(function (item) {
    return item + obj[item];
  }).join('') + obj.appsecret;

  //signcode md5加密
  signcode = md5(signcode.toLocaleUpperCase());

  return signcode;
}

describe('测试用户登陆接口', function (done) {
  this.timeout(5000);

  it('should login success when info is correct', function () {
    return userService.$login('11100006789', '111111').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  it('should login fail when password is incorrect', function () {
    return userService.$login('18610562327', 'sadfsdd').should.eventually.satisfy(function (obj) {
      return obj.message.code != 0;
    }).notify(done);
  });
});

describe('测试获取用户信息接口', function (done) {
  this.timeout(8000);

  before(function () {
    return userService.$login('11100006789', '111111').then(function (result) {
      HttpService.$getDefaultService().$setUserInfo(result);
    });
  });

  it('should get correct user info', function () {
    return userService.$getUserInfo('540264').should.eventually.satisfy(function (obj) {
      //console.log(obj);
      return obj.user && obj.user.mobile == '11100006789';
    }).notify(done);
  });
});

describe('测试手机验证码接口', function (done) {
  var registeredMobile = '18610562327';
  var mobile = '12' + getRandomMobile(100000000, 999999999);
  this.timeout(5000);

  it('should return code(-202) when mobile has registered ', function () {
    return userService.$sendVerifyCode(registeredMobile, 'register').should.eventually.satisfy(function (obj) {
      return obj.message.code == -202;
    }).notify(done);
  });

  it('should return a right code when mobile hasn\'t registered ', function () {
    return userService.$sendVerifyCode(mobile, 'register').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  it('should return code(-7) code when mobile has passed more then once in one minute ', function () {
    return userService.$sendVerifyCode(mobile, 'register').should.eventually.satisfy(function (obj) {
      return obj.message.code == -7;
    }).notify(done);
  });
});

describe('测试用户注册接口', function (done) {
  this.timeout(5000);
  var mobile = '12' + getRandomMobile(100000000, 999999999);
  //注册手机号之前，模拟发送手机验证码
  before(function () {
    return userService.$sendVerifyCode(mobile, 'register').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  it('should register fail when verifyCode is uncorrect', function () {
    return userService.$register(mobile, '111111', '7311', '', '', '', '').should.eventually.satisfy(function (obj) {
      return obj.message.code == -205;
    }).notify(done);
  });

  //测试环境通用验证码7310
  it('should register success when info is correct', function () {
    return userService.$register(mobile, '111111', '7310', '', '', '', '').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0 && obj.mobile == mobile;
    }).notify(done);
  });


  it('should register fail whit a -202 code when register oncemore', function () {
    return userService.$register(mobile, '111111', '7310', '', '', '', '').should.eventually.satisfy(function (obj) {
      return obj.message.code == -202;
    }).notify(done);
  });
});

describe('测试获取用户编号接口', function (done) {
  this.timeout(5000);
  it('should return right code when success', function () {
    return userService.$getClientID('49').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0 && obj.clientId == '880292356'
    }).notify(done);
  });
});


describe('测试忘记密码接口', function (done) {
  var mobile = '11143211234';
  var verifyCode = '7310';
  var newPwd = '111113';

  this.timeout(5000);

  before(function () {
    return userService.$sendVerifyCode(mobile, 'password').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  it('should return right code when success', function () {
    return userService.$forgetPwd(mobile, newPwd, verifyCode).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  it('should login success after send the forgetPwdMsg', function () {
    return userService.$login(mobile, newPwd).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });


});

//重置了登录密码之后，要重新将登录密码置回初始状态
describe('测试重置登录密码接口', function (done) {
  var mobile = '11143211235';
  var password = '111111';
  var newPassword = '111115';

  this.timeout(5000);

  before(function () {
    return userService.$login(mobile, password).then(function (result) {
      HttpService.$getDefaultService().$setUserInfo(result);
    });
  });

  it('should return right code when reset login_pwd success', function () {
    return userService.$modifyLoginPsw(password, newPassword).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  it('should login success after reset login_pwd success', function () {
    return userService.$login(mobile, newPassword).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  after(function () {
    //将登录密码重置为111111
    return userService.$modifyLoginPsw(newPassword, password).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });
});

//重置了交易密码之后，要重新将交易密码置回初始状态
describe('测试重置交易密码接口', function (done) {
  var mobile = '11143211235';
  var password = '111111';
  var newPassword = '111115';

  this.timeout(5000);

  before(function () {
    return userService.$login(mobile, password).then(function (result) {
      HttpService.$getDefaultService().$setUserInfo(result);
    });
  });

  it('should return right code when reset login_pwd success', function () {
    return userService.$modifyDealPsw(password, newPassword).should.eventually.satisfy(function (obj) {
      console.log(obj)
      return obj.message.code == 0;
    }).notify(done);
  });

  after(function () {
    //将登录密码重置为111111
    return userService.$modifyDealPsw(newPassword, password).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });
});

describe('测试绑定微信接口', function (done) {
  this.timeout(5000);
  it('should return right code when success', function () {
    return userService.$getClientID('49').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0 && obj.clientId == '880292356'
    }).notify(done);
  });
});

describe('测试第三方客户端appkey是否合法', function (done) {
  var info = {
    id: '522702198709317011',
    name: '张云鹏',
    appkey: 'jhe17d20459d6e8bcf',
    appsecret: 'ef0374fd25294140ac3e299dde77e9ba',
    timestamp: new Date().getTime()
  };

  info.signcode = getSignCode(info);
  //浏览器会自动转换timestamp为string
  info.timestamp = info.timestamp.toString();
  delete info.appsecret;
  this.timeout(5000);

  it('should return right code when params is right', function () {
    return userService.$verifyAccount(JSON.stringify(info)).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });
});

describe('测试第三方客户端appkey授权', function (done) {
  var thirdAppkey = 'jh1hRn62VcV4H317F9';
  var idNo = '532300198407277799';
  var password = '111111';

  this.timeout(5000);

  it('should return right code when password is right', function () {
    return userService.$bindAccount(thirdAppkey, idNo, password).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });
})

describe('测试登录数据上报', function (done) {
  var loginIp = '8.8.8.8';
  var userAgent = 'Mozilla/5.0 (Linux; U; Android 5.1; zh-cn; m1 metal Build/LMY47I) AppleWebKit/537.36 (KHTML, like Gecko)Version/4.0 Chrome/37.0.0.0 MQQBrowser/7.6 Mobile Safari/537.36';
  var uid = '61'; 

  this.timeout(5000);

  it('should return right code when info is right', function () {
    return userService.$loginRecord(loginIp, uid, userAgent).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });
})

describe('测试获取用户token', function (done) {
  var uid = '61'; 

  this.timeout(5000);

  it('should return right code when info is right', function () {
    return userService.$getUserToken(uid).should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });
})

describe('测试注册页活动', function (done) {
  this.timeout(5000);
  var mobile = '12' + getRandomMobile(100000000, 999999999);
  //注册手机号之前，模拟发送手机验证码

  before(function () {
    return userService.$sendVerifyCode(mobile, 'register').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  //测试环境通用验证码7310
  it('should register success when info is correct', function () {
    return userService.$register(mobile, '111111', '7310', '', '', '', '').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0 && obj.mobile == mobile;
    }).notify(done);
  });

  it('should login success', function () {
    return userService.$login(mobile, '111111').should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });

  it('should return right code when info is right', function () {
    return userService.$GetRegistrationActivity().should.eventually.satisfy(function (obj) {
      return obj.message.code == 0;
    }).notify(done);
  });
})