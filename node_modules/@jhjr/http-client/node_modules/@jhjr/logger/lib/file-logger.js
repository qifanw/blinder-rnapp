var winston = require('winston');
var myUtil = require('./log-util.js');
var nodeUtil = require('util');

var fileLogger  = function() {
  this.otherInfo = null;
  this.keyArr = [];
  this.fileConfig = {
    infoFile: '../logs/info.log',
    errorFile: '../logs/error.log'
  };
  this.loggerImpl = function() {
    return new winston.Logger({
      transports: [
        new (winston.transports.Console)({
          name: 'debug',
          level: 'debug',
          colorize: true,
          timestamp: function(){
            return ''
          },
          formatter: function (options) {
            return (undefined !== options.meta ? JSON.stringify(options.meta) : '')
          },
          json: true,
        }),
        new (winston.transports.File)({
          name: 'info',
          filename: this.fileConfig.infoFile,
          level: 'info',
          timestamp: function(){
            return ''
          },
          formatter: function (options) {
            return (undefined !== options.meta ? JSON.stringify(options.meta) : '')
          },
          colorize: true,
          json: true,
        }),
        new (winston.transports.File)({
          name: 'error',
          filename: this.fileConfig.errorFile,
          level: 'error',
          timestamp: function(){
            return ''
          },
          formatter: function (options) {
            return (undefined !== options.meta ? JSON.stringify(options.meta) : '')
          },
          colorize: true,
          json: true
        })
      ]
    })
  }
};

/**
 * 设置client的通用参数
 * @param obj {Object} 通用参数对象
 */
fileLogger.prototype.setGeneralParameter = function(obj) {
  this.otherInfo = obj;
};

/**
 * 设置client的过滤数组
 * @param arr {Array} 过滤数组
 */
fileLogger.prototype.setFilterParamter = function(arr) {
  this.keyArr = arr;
};

/**
 * 设置client的文件输出配置
 * @param fileConfig {Object} 文件配置对象
 */
fileLogger.prototype.setFileConfig = function(fileConfig) {
  this.fileConfig = fileConfig;
};

/**
 * debug 接口
 * @param arr {Array} 参数数组
 */
fileLogger.prototype.debug = function(arr) {
  var result = myUtil.getLogStructor(arguments, 'debug',this.otherInfo, this.keyArr);
  this.loggerImpl().info(result);
};

/**
 * info 接口
 * @param arr {Array} 参数数组
 */
fileLogger.prototype.info = function(arr) {
  var result = myUtil.getLogStructor(arguments, 'info',this.otherInfo, this.keyArr);
  this.loggerImpl().info(result);
};

/**
 * warn 接口
 * @param arr {Array} 参数数组
 */
fileLogger.prototype.warn = function(arr) {
  var result = myUtil.getLogStructor(arguments, 'warn',this.otherInfo, this.keyArr);
  this.loggerImpl().error(result);
};

/**
 * error 接口
 * @param arr {Array} 参数数组
 */
fileLogger.prototype.error = function(arr) {
  var result = myUtil.getLogStructor(arguments, 'error',this.otherInfo, this.keyArr);
  this.loggerImpl().error(result);
};

/**
 * 自定义error
 * @param name {String} error名字
 * @param msg {String} error 信息
 */
fileLogger.prototype.createError = function(name, msg) {
  var AbstractError = function (msg, constr) {
    Error.captureStackTrace(this, constr || this);
    this.message = msg || 'Error'
  };
  nodeUtil.inherits(AbstractError, Error);
  AbstractError.prototype.name = 'SuperError';

  var selfError = function (msg) {
    selfError.super_.call(this, msg, this.constructor)
  };
  nodeUtil.inherits(selfError, AbstractError);
  selfError.prototype.name = name;

  return new selfError(msg)
};
module.exports = exports = fileLogger;

