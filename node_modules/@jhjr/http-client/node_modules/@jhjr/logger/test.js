var chai = require("chai");
var should = require('chai').should();

var consoleLogger = require('./index').consoleLogger;
var consoleLogger2 = require('./index').consoleLogger;
var fileLogger = require('./index').fileLogger;

var logger = new consoleLogger();
var logger2 = new consoleLogger2();
// var logger3 = new fileLogger();
// logger3.setFileConfig({
//   infoFile: '../logs/infonn.log',
//   errorFile: '../logs/errornn.log'
// })


// logger实例设置通用参数
logger.setGeneralParameter({
  channel: 'online',
  base: 'beijing'
});

// logger实例设置通用参数
logger2.setGeneralParameter({
  channel: 'offline',
  base: 'shanghai'
});

// 设置通用过滤参数
logger.setFilterParamter(['password', 'married']);

var logExample1 = {
  name: 'li_lei',
  age: '25',
  password: '123456'
};

var logExample2 = {
  name: 'han_mei_mei',
  age: '23',
  password: '123456'
};

var logExample3 = {
  name: 'richer',
  password: '123',
  detail: {
    married: false,
    country: 'China',
    teacher: {
      married: true,
      country: 'China',
      password: '123456'
    }
  }
};

describe('测试日志记录功能-自定义object入参', function(){
  it('should return right log_structor', function() {
    return logger.info('logTag1', {
      message1:logExample1,
      message2: logExample2
    });
  });
});

describe('测试日志记录功能-测试format格式入参', function(){
  it('should return right log_structor', function() {
    return logger.info('logTag2', 'message1:%j  message2%j', logExample1, logExample2);
  });
});


describe('测试日志记录功能-测试基本入参', function(){
  it('should return right log_structor', function() {
    return logger.info('logTag3', logExample1, logExample2);
  });
  it('should return right log_structor', function() {
    return logger2.info('logTag3', logExample1, logExample2);
  });
});


describe('测试日志记录功能-过滤参数', function(){
  it('should return right log without filterKey: password married', function() {
    return logger.info('logTag',logExample3);
  });
  it('should return right log filterKey: password married', function() {
    return logger2.info('logTag',logExample3);
  });
});


describe('测试日志记录功能-自定义Error类型', function(){
  it('should return right log_structor', function() {
    var  selfError =  logger.createError('HttpStatusError', '接口返回非200');
    return selfError.name.should.to.equal('HttpStatusError') && selfError.message.should.to.equal('接口返回非200');
  });
});
