var request = require('request');
var _ = require('underscore');
var URI = require('urijs');
var consoleLogger = require('@jhjr/logger').consoleLogger;
var logger = new consoleLogger();

/**
 * 实现标准接口的nodejs httpClient类，将request库请求封装为Promise对象，并提供入参过滤、统一前缀、json解析等统一设置
 * @param {String}  urlPrefix     url统一前缀
 * @param {Object}  paramsFilters  实现filterParams方法的对象
 * @constructor
 */
var HttpClient = function(urlPrefix, paramsFilters) {
  this.urlPrefix = urlPrefix;
  this.paramsFilters = paramsFilters;
};


/**
 * 获取defaultClient单例
 * @param {String}  urlPrefix     url统一前缀
 * @param {Object}  paramsFilters  实现filterParams方法的对象
 * @returns {HttpClient}
 */
HttpClient.$getDefaultClient = function(urlPrefix, paramsFilters) {
  if (!HttpClient.defaultClient) {
    HttpClient.defaultClient = new HttpClient(urlPrefix, paramsFilters);
  }
  return HttpClient.defaultClient;
};

/**
 * 添加参数过滤器
 * @param {object}  value 实现了filterParams方法的对象
 */
HttpClient.prototype.$addParamsFilter = function(value) {
  this.paramsFilters = this.paramsFilters || [];
  var replaceFlag = false;
  // 判断是否存在同类型过滤器，如果存在则替换，不存在则增加
  for(var i= 0; i < this.paramsFilters.length; i++) {
    var filter = this.paramsFilters[i];
    if (value.constructor == filter.constructor) {
      this.paramsFilters.splice(i, 1, value);
      replaceFlag = true;
      break;
    };
  };

  if (!replaceFlag) {
    this.paramsFilters.push(value);
  }
};

/**
 * 清除参数过滤器
 */
HttpClient.prototype.$clearParamsFilter = function() {
  this.paramsFilters = [];
};


/**
 * @description 设置log对象
 * @param {Object} value log,error等方法的对象
 */
HttpClient.prototype.$setLogger = function(value) {
  this.logger = value;
};

/**
 * @description 设置log过滤数组
 * @param {Array} omitArray 需要在日志中过滤的参数数组
 */
HttpClient.prototype.$setLoggerFilterParamter = function(omitArray) {
  if(omitArray && ( omitArray instanceof Array ) && omitArray.length > 0 ) {
    logger.setFilterParamter(omitArray);
  }
};

/**
 * @description 设置log通用参数对象
 * @param {Object} generalParamter 需要在日志中添加的通用参数
 */
HttpClient.prototype.$setLoggerGeneralParamter = function(generalParamter) {
  logger.setGeneralParameter && logger.setGeneralParameter(generalParamter);
};

/**
 * @description 设置错误处理规则
 * @param {Object} haddingFunc 业务处理函数
 * @returns {Object} 函数，入参为接口返回的JSON对象（JSON.parse()后的结果），函数返回值为一个配置对象，
 * * 配置对象的结构如下{isBusinessErr: boolean/是否为业务错误,businessErrDesc: string/业务错误签名/非业务错误可以不设置键值,businessErrCode: int/业务错误接口message.code,如 -1/非业务错误可以不设置键值}
 */
HttpClient.prototype.$setErrHandingRule = function(haddingFunc) {
  this.errHandingRule  = haddingFunc;
};

/**
 * @description 设置接口前缀
 * @param {String} value 接口前缀
 */
HttpClient.prototype.$setUrlPrefix = function(value) {
  this.urlPrefix = value;
};
/**
 * @description 根据入参生成请求信息，并根据配置增加统一前缀、过滤参数及其他统一处理
 * @param {String|Object} options url或初始请求信息
 * @param {String} method <GET|POST>
 * @param {String} params 请求参数
 * @returns {Object} 处理后最终的http请求信息
 */
HttpClient.prototype.getOptions = function (options, method, params) {
  params = params || {};
  var result = options || {};
  // 如果是get请求,为了简化参数,options可以只是个url字符串,这里统一为对象格式
  if (_.isString(options)) {
    result = {
      uri: options,
    };
  }

  // 增加统一前缀
  if (result.uri && result.uri.indexOf('http') != 0){
    result.uri = this.urlPrefix + result.uri;
  }

  // 默认GET
  result.method = method || 'GET';

  // 设置post参数
  if (result.method == 'POST') {
    result.form = params;

    if (this.paramsFilters) {
      this.paramsFilters.forEach(function(filter){
        result.form = filter.filterParams(result.form);
      });
    }
  } else {
    var uri = new URI(result.uri);
    var paramStr = uri.search();
    var currentParams = URI.parseQuery(paramStr);
    var resultParams = _.extend(params, currentParams);
    resultParams = dealElement(resultParams);//过滤掉接口请求参数对象中的无效字段:undefined null ''
    if (this.paramsFilters) {
      this.paramsFilters.forEach(function(filter){
        resultParams = filter.filterParams(resultParams);
      });
    }

    uri.setSearch(resultParams);
    //result.uri = URI.decode(uri.toString());
    result.uri = uri.toString()

  }

  // encode非url字符
  //result.uri = encodeURI(result.uri);

  var tag = new URI(result.uri).path() || 'url';
  logger.info(tag, {
    method: result.method,
    url: result.uri || '',
    body: result.form || {}
  });

  // 默认60秒超时
  result.timeout = result.timeout || 60000;
  return result;
};

/**
 * @description 将请求封装为Promise对象
 * @param {Object} options
 * @returns {Promise} 请求对应的Promise对象
 * @see {@link https://github.com/request/request#requestoptions-callback}
 */
HttpClient.prototype.request = function (options) {
  var tag = new URI(options.uri).path() || 'url';
  var that = this;
  return new Promise(function(resolve, reject){
    request(options, function (err, response, body) {
      if (!err) {
        if (response.statusCode == 200 || response.statusCode == 304) {

          try {
            // 1- 解析返回JSON串
            var data = JSON.parse(body.trim());// 解析网络请求结果为JSON对象
            var dataForInfo = deepCopy(data);

            // 2- 用 url 中的 path 打 tag ,记录日志
            logger.info(tag, {
              method: options.method,
              url: options.uri || '',
              body: options.form || {},
              response: JSON.stringify(dataForInfo),
              responseHeaders: JSON.stringify(response.headers || {})
            });

            // 3- 触发httpService的回调函数（记录非http状态相关的日志）
            that.errHandingRule && that.errHandingRule(tag, options, data);

            // 4- resovle返回值
            resolve(body);

          } catch (err){
            // 处理接口返回值解析异常
            logger.error(tag, {
              method: options.method,
              url: options.uri || '',
              body: options.form || {},
              responseHeaders: JSON.stringify(response.headers || {}),
              errName: err.name,
              errMsg: err.message,
              errStack: err.stack
            });
            reject(err);
          }

        } else {
          // 处理接口返回状态异常
          var wrongHttpStatusError = logger.createError('HttpStatusError', 'http请求返回值不是200或者304');
          logger.error(tag, {
            method: options.method,
            url: options.uri || '',
            httpCode: response.statusCode || '',
            responseHeaders: JSON.stringify(response.headers || {}),
            errName: wrongHttpStatusError.name,
            errMsg: wrongHttpStatusError.message,
            errStack: wrongHttpStatusError.stack
          });
          reject(wrongHttpStatusError);
        }
      } else {
        // http处理断网、超时等错误
        logger.error(tag, {
          method: options.method,
          url: options.uri || '',
          body: options.form || {},
          responseHeaders: JSON.stringify({}),
          errName: err.name,
          errMsg: err.message,
          errStack: err.stack
        });
        reject(err);
      }
    });
  });
};
/**
 * @description get请求快捷方法
 * @params {String} 请求url
 * @returns {Promise}
 */
HttpClient.prototype.$get = function (url, params) {
  var options = this.getOptions(url, 'GET', params);
  return this.request(options);
};

/**
 * @description 接口类get请求快捷方法，将json串转换为对象
 * @param {String} 请求url
 * @returns {Promise}
 */
HttpClient.prototype.$getJson = function (url, params) {
  return this.$get(url, params).then(function (body) {
    return JSON.parse(body);
  });
};
/**
 * @description post请求快捷方法
 * @param {String|Object} options 请求url
 * @param {String|Object} form 表单参数
 * @returns {Promise}
 * @see {@link module:http.request}
 */
HttpClient.prototype.$post = function (url, form) {
  var options = this.getOptions(url, 'POST', form);
  return this.request(options);
};
/**
 * @description 接口类post请求快捷方法，将json串转换为对象
 * @param {String}  url   请求url
 * @param {Object}  form  表单键值对
 * @returns {Promise}
 */
HttpClient.prototype.$postJson = function (url, form) {
  return this.$post(url, form).then(function (body) {
    return JSON.parse(body);
  });
};

function dealElement(obj){
  var param = {};
  if ( obj === null || obj === undefined || obj === "" ) return param;
  for ( var key in obj ){
    if ( obj[key] !== null && obj[key] !== undefined && obj[key] !== "" ){
      param[key] = obj[key];
    }
  }
  return param;
}
function deepCopy (obj) {
  if (typeof obj !== 'object') return;
  var newObj = obj instanceof Array ? [] : {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      newObj[key] = typeof obj[key] === 'object' ? deepCopy(obj[key]) : obj[key];
    }
  }
  return newObj;
}
module.exports = exports = HttpClient;