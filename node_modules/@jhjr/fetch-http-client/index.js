/**
 * Created by ztian on 16/7/13.
 */
var StringUtil = require('@jhjr/util').stringUtil;
var URI = require('urijs');

/**
 * @description
 *
 * 由于browserify是编译时工具，如果在代码中根据运行时环境来引入不同的nodejs模块，则会造成冗余代码问题，因此fetch-http-client依赖外部环境支持fetch api，
 *
 * * nodejs需要执行global.fetch = require('node-fetch'); global.FormData = require('form-data');
 * * react native环境默认支持
 * * 浏览器环境有兼容性问题，可以通过引入fetch polyfill来解决
 *
 * @param {string}  urlPrefix     url前缀
 * @param {object}  paramsFilter  参数过滤
 * @constructor
 */
var HttpClient = function(urlPrefix, paramsFilters, logger) {
  this.paramsFilters = paramsFilters;
  this.urlPrefix = urlPrefix;
  this.logger = logger;
  this.defaultHeaders = {
    "Content-Type": "application/x-www-form-urlencoded"
  }
};

/**
 * 获取单例对象
 * @param {string}  urlPrefix     url前缀
 * @param {object}  paramsFilter  参数过滤
 * @returns {HttpClient}
 */
HttpClient.$getDefaultClient = function(urlPrefix, paramsFilter) {
  if (!HttpClient.defaultClient) {
    HttpClient.defaultClient = new HttpClient(urlPrefix, paramsFilter);
  }
  return HttpClient.defaultClient;
};

/**
 * 添加参数过滤器
 * @param {object}  value 实现了filterParams方法的对象
 */
HttpClient.prototype.$addParamsFilter = function(value) {
  this.paramsFilters = this.paramsFilters || [];
  var replaceFlag = false;
  // 判断是否存在同类型过滤器，如果存在则替换，不存在则增加
  for(var i= 0; i < this.paramsFilters.length; i++) {
    var filter = this.paramsFilters[i];
    if (value.constructor == filter.constructor) {
      this.paramsFilters.splice(i, 1, value);
      replaceFlag = true;
      break;
    };
  };

  if (!replaceFlag) {
    this.paramsFilters.push(value);
  }
};

/**
 * 清除参数过滤器
 */
HttpClient.prototype.$clearParamsFilter = function() {
  this.paramsFilters = [];
};

/**
 * 添加日志相关逻辑
 */
HttpClient.prototype.$setLogger = function(logger) {
  this.logger = logger;
};

/**
 * @description 设置log过滤数组
 * @param {Array} omitArray 需要在日志中过滤的参数数组
 */
HttpClient.prototype.$setLoggerFilterParamter = function(omitArray) {
  if(omitArray && ( omitArray instanceof Array ) && omitArray.length > 0 ) {
    this.logger && this.logger.setFilterParamter(omitArray);
  }
};

/**
 * @description 设置log通用参数对象
 * @param {Object} generalParamter 需要在日志中添加的通用参数
 */
HttpClient.prototype.$setLoggerGeneralParamter = function(generalParamter) {
  this.logger && this.logger.setGeneralParameter(generalParamter);
};

/**
 * @description 设置错误处理规则
 * @param {Object} haddingFunc 业务处理函数
 * @returns {Object} 函数，入参为接口返回的JSON对象（JSON.parse()后的结果），函数返回值为一个配置对象，
 * * 配置对象的结构如下{isBusinessErr: boolean/是否为业务错误,businessErrDesc: string/业务错误签名/非业务错误可以不设置键值,businessErrCode: int/业务错误接口message.code,如 -1/非业务错误可以不设置键值}
 */
HttpClient.prototype.$setErrHandingRule = function(haddingFunc) {
  this.errHandingRule  = haddingFunc;
};

/**
 * 设置url前缀
 * @param {string}  value 一般为域名，如http://p.jinhui365.cn
 */
HttpClient.prototype.$setUrlPrefix = function(value) {
  this.urlPrefix = value;
};

/**
 * 设置post请求方式
 * @param {string}  value  formdata/json
 */
HttpClient.prototype.$setHeaders = function(value) {
  this.defaultHeaders = value;
};

/**
 * get请求
 * @param url
 * @param params
 * @returns {Promise}
 */
HttpClient.prototype.$get = function(url, params, headers) {
  return this.$request("GET", url, headers, params, false)
};

/**
 * get请求，返回值是json，解析为对象
 * @param url
 * @param params
 * @returns {Promise}
 */
HttpClient.prototype.$getJson = function(url, params, headers) {
  return this.$request("GET", url, headers, params, true)
};

/**
 * post请求
 * @param url
 * @param params
 * @returns {Promise}
 */
HttpClient.prototype.$post = function(url, params, headers) {
  return this.$request("POST", url, headers, params, false)
};

/**
 * post请求，返回值是json，解析为对象
 * @param url
 * @param params
 * @returns {Promise}
 */
HttpClient.prototype.$postJson = function(url, params, headers) {
  return this.$request("POST", url, headers, params, true)
};

function dealElement(obj){
  var param = {};
  if ( obj === null || obj === undefined || obj === "" ) return param;
  for ( var key in obj ){
    if ( obj[key] !== null && obj[key] !== undefined){
      param[key] = obj[key];
    }
  }
  return param;
}

function returnJson(response) {
  if (response.ok) {
    // 200响应
    var json;
    try {
      json = response.json();
      return json;
    } catch (err) {
      throw err;
    }
  } else {
    // 非200响应
    throw  new Error('response.status:' + response.status);
  }
}

HttpClient.prototype.$getUrl= function (method, url, params) {
  var resultUrl=url;

  if (this.urlPrefix && url && url.indexOf('http') != 0) {
    resultUrl = this.urlPrefix + url;
  }

  if(method == 'GET') {
    resultUrl = StringUtil.buildUrlWithParams(resultUrl, params);
  }

  return resultUrl;
}

HttpClient.prototype.$getParams= function (params) {
  var resultParams = params;
  resultParams = dealElement(params);//过滤掉接口请求参数对象中的无效字段:undefined null ''
  if (this.paramsFilters) {
    this.paramsFilters.forEach(function(filter){
      resultParams = filter.filterParams(resultParams);
    });
  }
  return resultParams;
}

function getBody(method, headers, params) {
  let content = {
    method: method,
    headers: headers
  };

  if(method == 'GET') {
    return {};
  } else if (headers["Content-Type"] == "application/x-www-form-urlencoded") {
    content.body = URI.buildQuery(params);
  } else if (headers["Content-Type"] == "application/json") {
    content.body = JSON.stringify(params);
  } else {
    content.body = URI.buildQuery(params);
  }

  return content;
}

HttpClient.prototype.$request = function (method, url, headers, params, isJson) {
  // 初始化
  if(headers) {
    for(var key in this.defaultHeaders) {
      !headers[key] && (headers[key] = this.defaultHeaders[key])
    }
  } else {
    headers = this.defaultHeaders;
  }

  !params && (params = {})

  var _this = this;
  var tag = new URI(url).path() || 'url';
  this.logger && this.logger.info(tag, {
    headers: headers,
    method: method,
    url: url,
    body: params
  });

  // 参数处理
  var resultParams = this.$getParams(params)

  // 访问地址处理
  var resultUrl = this.$getUrl(method, url, resultParams);

  return fetch(resultUrl, getBody.call(this, method, headers, resultParams)).then(function(response) {
    return isJson ? returnJson(response) : response;
  }, null).then(null, function(err) {
    _this.logger && _this.logger.error(tag, {
      headers: headers,
      method: method,
      url: url,
      body: params,
      errName: err.name,
      errMsg: err.message,
      errStack: err.stack
    });
    throw err;
  })
}

module.exports = exports = HttpClient;