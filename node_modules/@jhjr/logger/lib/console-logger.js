var myUtil = require('./log-util.js');
var nodeUtil = require('util');

var consoleLogger  = function() {
  this.otherInfo = null;
  this.keyArr = [];
};

/**
 * 设置client的通用参数
 * @param obj {Object} 通用参数对象
 */
consoleLogger.prototype.setGeneralParameter = function(obj) {
  this.otherInfo = obj;
};

/**
 * 设置client的过滤数组
 * @param arr {Array} 过滤数组
 */
consoleLogger.prototype.setFilterParamter = function(arr) {
  this.keyArr = arr;
};

/**
 * debug 接口
 * @param arr {Array} 参数数组
 */
consoleLogger.prototype.debug = function(arr) {
  var result = myUtil.getLogStructor(arguments,'debug',this.otherInfo, this.keyArr);
  console.log(result)
};

/**
 * info 接口
 * @param arr {Array} 参数数组
 */
consoleLogger.prototype.info = function(arr) {
  var result = myUtil.getLogStructor(arguments,'info',this.otherInfo, this.keyArr);
  console.log(result)
};

/**
 * warn 接口
 * @param arr {Array} 参数数组
 */
consoleLogger.prototype.warn = function(arr) {
  var result = myUtil.getLogStructor(arguments,'warn',this.otherInfo, this.keyArr);
  console.error(result)
};

/**
 * error 接口
 * @param arr {Array} 参数数组
 */
consoleLogger.prototype.error = function(arr) {
  var result = myUtil.getLogStructor(arguments,'error',this.otherInfo, this.keyArr);
  console.error(result)
};

/**
 * 自定义error
 * @param name {String} error名字
 * @param msg {String} error 信息
 */
consoleLogger.prototype.createError = function(name, msg) {
  var AbstractError = function (msg, constr) {
    Error.captureStackTrace(this, constr || this);
    this.message = msg || 'Error'
  };
  nodeUtil.inherits(AbstractError, Error);
  AbstractError.prototype.name = 'SuperError';

  var selfError = function (msg) {
    selfError.super_.call(this, msg, this.constructor)
  };
  nodeUtil.inherits(selfError, AbstractError);
  selfError.prototype.name = name;



  return new selfError(msg)
};

module.exports = exports = consoleLogger;