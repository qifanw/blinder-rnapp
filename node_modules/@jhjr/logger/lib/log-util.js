var nodeUtil = require('util');
var _ = require('underscore');

module.exports = {
  getLogStructor: function(args, lev, generalParamter, filterArray) {
    var arr = Array.prototype.slice.apply(args);

    var logTag = arr[0];            // 取出 log 的tag信息，如'banner'
    var logContent = arr.slice(1);  // 取出 log 的除了tag以外的信息,如[obj1,obj2] 或者 [formatStr, obj]

    var logWithTimestampAndLevel = new Date().getTime() + '##'+ lev + '##%s';    // 例如：2017-08-08 16:42:25##info##%s##
    var logFromatWithTag = nodeUtil.format(logWithTimestampAndLevel, logTag);    // 例如：2017-08-08 16:42:25##info##banner##
    var time_lev_tag_array = logFromatWithTag.split('##');                       // 例如：['2017-08-08 16:42:25','info', 'banner']

    // 1- 获取日志主体结构
    var result = {
      t: time_lev_tag_array[0] || new Date().getTime(),
      level: time_lev_tag_array[1] || 'info',
      tag: time_lev_tag_array[2] || '',
      info: generalParamter || {},
      msg:''
    };

    // 2- 过滤日志输出主体内容中的敏感数据
    var needFilter = logContent.length > 0 && (Object.prototype.toString.call(filterArray) === '[object Array]' && filterArray.length > 0);
    if(needFilter) {
      for (var i = 0; i < logContent.length; i++) {
        if(typeof logContent[i] === 'object') {
          logContent[i] = this.clearParamterByKey(logContent[i], filterArray)
        }
      }
    }

    // 3- 获取日志数据主体
    if(logContent.length > 0) {
      var tempMsg;
      if(typeof logContent[0] === 'string'){
        tempMsg = {
          output0: nodeUtil.format.apply(nodeUtil.format, logContent).replace(/\n/g,"").replace(/\"/g, '"')
        }
      } else if (logContent.length == 1){
        tempMsg = logContent[0]
      } else {
        var resultObj = {};
        for(var j = 0; j< logContent.length; j++) {
          var tempKey = 'output' + j;
          resultObj[tempKey] = logContent[j]
        }
        tempMsg = resultObj
      }
    }

    result.msg = tempMsg;

    return JSON.stringify(result);

  },
  clearParamterByKey: function(target,filterArray) {
    for(var key in target) {
      if(typeof target[key] === 'object') {
        target[key] = arguments.callee(target[key], filterArray)
      } else {
        target = _.omit(target, filterArray)
      }
    }
    return target
  },
  createError: function(name, msg){
    var AbstractError = function (msg, constr) {
      Error.captureStackTrace(this, constr || this);
      this.message = msg || 'Error'
    };
    nodeUtil.inherits(AbstractError, Error);
    AbstractError.prototype.name = 'SuperError';

    var selfError = function (msg) {
      selfError.super_.call(this, msg, this.constructor)
    };
    nodeUtil.inherits(selfError, AbstractError);
    selfError.prototype.name = name;

    return new selfError(msg)
  }
};