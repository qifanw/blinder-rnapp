var myUtil = require('./log-util.js');
var nodeUtil = require('util');
// nodejs需要执行global.fetch = require('node-fetch'); global.FormData = require('form-data');

var httpLogger = function () {
  this.otherInfo = null;
  this.deviceInfo = null;
  this.keyArr = [];
  this.loggerUrl = 'http://10.0.0.223:9097/save';
  this.consoleFlag = false;

  this.loggerImpl = function (log) {
    log = JSON.parse(log);

    // 判断是否要输出到标准输出流里
    this.consoleFlag && console.log(log);

    fetch(this.loggerUrl, {
      method: 'POST',
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        logs: JSON.stringify([log]),
        deviceInfo: JSON.stringify(this.deviceInfo || {})
      })
    }).catch(function (error) {
      error && console.log("httpLogger:", error);
    })
  }.bind(this);
};

httpLogger.prototype.setConsoleFlag = function(flag) {
  this.consoleFlag = flag;
}

httpLogger.prototype.setLoggerUrl = function (url) {
  this.loggerUrl = url;
}
/**
 * 设置client的通用参数
 * @param obj {Object} 通用参数对象
 */
httpLogger.prototype.setGeneralParameter = function (obj) {
  this.otherInfo = obj;
};

/**
 * 设置client的设备信息
 * @param obj {Object} 设备信息对象
 */
httpLogger.prototype.setDeviceParameter = function (obj) {
  this.deviceInfo = obj;
};

/**
 * 设置client的过滤数组
 * @param arr {Array} 过滤数组
 */
httpLogger.prototype.setFilterParamter = function (arr) {
  this.keyArr = arr;
};

/**
 * debug 接口
 * @param arr {Array} 参数数组
 */
httpLogger.prototype.debug = function (arr) {
  var result = myUtil.getLogStructor(arguments, 'debug', this.otherInfo, this.keyArr);
  this.loggerImpl(result)
};

/**
 * info 接口
 * @param arr {Array} 参数数组
 */
httpLogger.prototype.info = function (arr) {
  var result = myUtil.getLogStructor(arguments, 'info', this.otherInfo, this.keyArr);
  this.loggerImpl(result)
};

/**
 * warn 接口
 * @param arr {Array} 参数数组
 */
httpLogger.prototype.warn = function (arr) {
  var result = myUtil.getLogStructor(arguments, 'warn', this.otherInfo, this.keyArr);
  this.loggerImpl(result)
};

/**
 * error 接口
 * @param arr {Array} 参数数组
 */
httpLogger.prototype.error = function (arr) {
  var result = myUtil.getLogStructor(arguments, 'error', this.otherInfo, this.keyArr);
  this.loggerImpl(result)
};

/**
 * 自定义error
 * @param name {String} error名字
 * @param msg {String} error 信息
 */
httpLogger.prototype.createError = function (name, msg) {
  var AbstractError = function (msg, constr) {
    Error.captureStackTrace(this, constr || this);
    this.message = msg || 'Error'
  };
  nodeUtil.inherits(AbstractError, Error);
  AbstractError.prototype.name = 'SuperError';

  var selfError = function (msg) {
    selfError.super_.call(this, msg, this.constructor)
  };
  nodeUtil.inherits(selfError, AbstractError);
  selfError.prototype.name = name;



  return new selfError(msg)
};

module.exports = exports = httpLogger;